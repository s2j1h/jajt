import os
import logging
from datetime import datetime, time
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from github import Github
from dotenv import load_dotenv



# Configuration depuis les variables d'environnement
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "")
GITHUB_REPO = os.getenv("GITHUB_REPO", "")
JOURNAL_FILE = os.getenv("JOURNAL_FILE", "journal.md")
TIMEZONE = os.getenv("TIMEZONE", "Europe/Paris")

# ID Telegram autoris√©s (optionnel - pour s√©curiser le bot)
# Format: "123456789,987654321" dans la variable d'environnement
AUTHORIZED_USERS_STR = os.getenv("AUTHORIZED_USERS", "0")
AUTHORIZED_USERS = [int(id.strip()) for id in AUTHORIZED_USERS_STR.split(",") if id.strip()]

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class JournalBot:
    def __init__(self):
        self.github = Github(GITHUB_TOKEN)
        self.repo = self.github.get_repo(GITHUB_REPO)
        self.tz = pytz.timezone(TIMEZONE)
        
    def get_current_content(self):
        """R√©cup√®re le contenu actuel du fichier journal"""
        try:
            file_contents = self.repo.get_contents(JOURNAL_FILE)
            return file_contents.decoded_content.decode('utf-8'), file_contents
        except:
            # Le fichier n'existe pas encore
            return "", None
    
    def format_entry(self, text):
        """Formate une entr√©e de journal"""
        now = datetime.now(self.tz)
        date_str = now.strftime("%Y-%m-%d")
        time_str = now.strftime("%H:%M")
        
        # Format Markdown pour une belle pr√©sentation
        entry = f"\n## üìù {date_str} - {time_str}\n"
        entry += f"{text}\n"
        entry += f"\n---\n"
        
        return entry
    
    def save_to_github(self, new_entry, user_name):
        """Sauvegarde l'entr√©e dans GitHub"""
        try:
            # R√©cup√©rer le contenu actuel
            current_content, file_obj = self.get_current_content()
            
            # Si le fichier n'existe pas, cr√©er un header
            if not current_content:
                current_content = "# üìî Mon Journal Personnel\n\n"
                current_content += f"*Cr√©√© le {datetime.now(self.tz).strftime('%Y-%m-%d')}*\n"
                current_content += "\n---\n"
            
            # Ajouter la nouvelle entr√©e
            updated_content = current_content + new_entry
            
            # Cr√©er le message de commit
            commit_message = f"‚úèÔ∏è Nouvelle entr√©e - {datetime.now(self.tz).strftime('%Y-%m-%d %H:%M')}"
            
            # Mettre √† jour ou cr√©er le fichier
            if file_obj:
                self.repo.update_file(
                    JOURNAL_FILE,
                    commit_message,
                    updated_content,
                    file_obj.sha
                )
            else:
                self.repo.create_file(
                    JOURNAL_FILE,
                    commit_message,
                    updated_content
                )
            
            return True
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde: {e}")
            return False

# Gestionnaires de commandes
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /start"""
    user = update.effective_user
    
    # V√©rifier l'autorisation si configur√©e
    if AUTHORIZED_USERS and user.id not in AUTHORIZED_USERS:
        await update.message.reply_text(
            "‚ùå D√©sol√©, vous n'√™tes pas autoris√© √† utiliser ce bot."
        )
        return
    
    welcome_message = """
üéâ Bienvenue dans votre Journal Personnel !

üìù **Comment utiliser ce bot :**
‚Ä¢ Envoyez simplement un message pour cr√©er une entr√©e
‚Ä¢ Utilisez /stats pour voir vos statistiques
‚Ä¢ Utilisez /last pour voir votre derni√®re entr√©e
‚Ä¢ Utilisez /help pour revoir ces instructions

Tous vos messages sont sauvegard√©s sur GitHub avec versioning complet !

Commencez d√®s maintenant en envoyant votre premier message üìñ
    """
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /help"""
    help_text = """
üìö **Just Another Journaling Tool - Jalt**

**Commandes disponibles :**
‚Ä¢ /start - D√©marrer le bot
‚Ä¢ /help - Afficher cette aide
‚Ä¢ /stats - Voir vos statistiques
‚Ä¢ /last - Voir votre derni√®re entr√©e
‚Ä¢ /github - Obtenir le lien vers votre journal

**Formats support√©s :**
‚Ä¢ Texte simple
‚Ä¢ Emojis üòä
‚Ä¢ Liens
‚Ä¢ **Markdown** basique

Envoyez simplement un message pour cr√©er une entr√©e !
    """
    await update.message.reply_text(help_text)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /stats - Affiche les statistiques du journal"""
    user = update.effective_user
    
    if AUTHORIZED_USERS and user.id not in AUTHORIZED_USERS:
        return
    
    try:
        bot = JournalBot()
        content, _ = bot.get_current_content()
        
        if content:
            # Compter les entr√©es (chaque entr√©e commence par ##)
            entries_count = content.count("\n## üìù")
            words_count = len(content.split())
            
            stats_message = f"""
üìä **Statistiques de votre journal**

‚Ä¢ üìù Nombre d'entr√©es : {entries_count}
‚Ä¢ üìñ Nombre de mots total : {words_count}
‚Ä¢ üìÖ Premi√®re entr√©e : {datetime.now(bot.tz).strftime('%Y-%m-%d')}
            """
        else:
            stats_message = "üìä Aucune entr√©e pour le moment. Commencez √† √©crire !"
        
        await update.message.reply_text(stats_message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erreur lors de la r√©cup√©ration des stats: {e}")

async def last_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /last - Affiche la derni√®re entr√©e"""
    user = update.effective_user
    
    if AUTHORIZED_USERS and user.id not in AUTHORIZED_USERS:
        return
    
    try:
        bot = JournalBot()
        content, _ = bot.get_current_content()
        
        if content and "## üìù" in content:
            # Extraire la derni√®re entr√©e
            entries = content.split("\n## üìù")
            if len(entries) > 1:
                last = "## üìù" + entries[-1].split("\n---")[0]
                await update.message.reply_text(f"**Votre derni√®re entr√©e :**\n\n{last}")
            else:
                await update.message.reply_text("Aucune entr√©e trouv√©e.")
        else:
            await update.message.reply_text("üìñ Votre journal est vide pour le moment.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erreur: {e}")

async def github_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /github - Donne le lien vers le journal"""
    user = update.effective_user
    
    if AUTHORIZED_USERS and user.id not in AUTHORIZED_USERS:
        return
    
    github_url = f"https://github.com/{GITHUB_REPO}/blob/main/{JOURNAL_FILE}"
    await update.message.reply_text(
        f"üîó **Votre journal sur GitHub :**\n{github_url}"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestionnaire principal pour tous les messages texte"""
    user = update.effective_user
    
    # V√©rifier l'autorisation
    if AUTHORIZED_USERS and user.id not in AUTHORIZED_USERS:
        await update.message.reply_text(
            "‚ùå Vous n'√™tes pas autoris√© √† utiliser ce bot."
        )
        return
    
    text = update.message.text
    user_name = user.first_name or "Anonyme"
    
    # Feedback imm√©diat
    processing_msg = await update.message.reply_text("‚úçÔ∏è Enregistrement en cours...")
    
    try:
        # Cr√©er et sauvegarder l'entr√©e
        bot = JournalBot()
        entry = bot.format_entry(text)
        
        if bot.save_to_github(entry, user_name):
            # Succ√®s
            await processing_msg.edit_text(
                "‚úÖ **Entr√©e sauvegard√©e !**\n\n"
                f"üìÖ {datetime.now(bot.tz).strftime('%H:%M')} - "
                f"{len(text.split())} mots ajout√©s √† votre journal."
            )
            
            # Log pour debug
            logger.info(f"Entr√©e sauvegard√©e pour {user_name}: {text[:50]}...")
        else:
            await processing_msg.edit_text(
                "‚ùå Erreur lors de la sauvegarde. Veuillez r√©essayer."
            )
    except Exception as e:
        logger.error(f"Erreur: {e}")
        await processing_msg.edit_text(
            f"‚ùå Une erreur s'est produite: {str(e)}"
        )

async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """Envoie un rappel quotidien pour √©crire dans le journal"""
    job = context.job
    
    # Si des utilisateurs sont autoris√©s, envoyer le rappel √† chacun d'eux
    if AUTHORIZED_USERS:
        for user_id in AUTHORIZED_USERS:
            await context.bot.send_message(
                chat_id=user_id,
                text="üåô Bonsoir ! C'est l'heure d'√©crire dans votre journal !\n\nComment s'est pass√©e votre journ√©e ?"
            )
    else:
        logger.warning("Aucun utilisateur autoris√© configur√© pour le rappel quotidien")

def main():
    """Fonction principale"""
    # Cr√©er l'application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Ajouter les gestionnaires de commandes
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("last", last_entry))
    application.add_handler(CommandHandler("github", github_link))
    
    # Gestionnaire pour tous les messages texte
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Configurer le job de rappel quotidien
    job_queue = application.job_queue
    # Programmer le rappel tous les jours √† 20h00
    reminder_time = time(20, 00, tzinfo=pytz.timezone(TIMEZONE))
    job_queue.run_daily(daily_reminder, time=reminder_time)
    
    # D√©marrer le bot
    logger.info("üöÄ Bot d√©marr√© !")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()